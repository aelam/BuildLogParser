name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test (${{ matrix.os }}, Swift ${{ matrix.swift }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        swift: [ "5.9", "5.10", "6.1" ]

    steps:
      - uses: actions/checkout@v4

      # macOS: setup-swift
      - name: Setup Swift (macOS)
        if: matrix.os == 'macos-latest'
        uses: swift-actions/setup-swift@v2
        with:
          swift-version: ${{ matrix.swift }}

      # Linux: use Docker container
      - name: Setup Swift (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: echo "Using Swift ${{ matrix.swift }} from Docker image"
        # 注意：容器方式要在 job 层定义，见下方 "container"

      - name: Cache Swift build
        uses: actions/cache@v4
        with:
          path: |
            .build
            .swiftpm
          key: ${{ runner.os }}-swift-${{ matrix.swift }}-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-swift-${{ matrix.swift }}-

      - name: Print Swift version
        run: swift --version

      - name: Build & Test
        run: |
          swift build
          swift test

      - name: Build Release
        run: swift build -c release

      - name: CLI Tests
        run: |
          ./.build/release/buildlog-parser --help
          echo "File.swift:10:5: error: cannot find 'unknownFunction' in scope" \
            | ./.build/release/buildlog-parser parse - --format json

    container:
      image: ${{ matrix.os == 'ubuntu-latest' && format('swift:{0}', matrix.swift) || '' }}
      # macOS 不支持 container，会忽略这个字段

  lint:
    name: Code Quality & Formatting
    runs-on: macos-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: swift-actions/setup-swift@v2
        with:
          swift-version: "5.10" # 只在最新版本跑 Lint
      - run: swift run -c release --package-path Tools swiftformat .
